"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"f7e5a58a67af\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaHBcXE9uZURyaXZlXFxEZXNrdG9wXFxCbG9nTWluZC1BcHBcXGJsb2ctbWluZC1mcm9udGVuZFxcYXBwXFxnbG9iYWxzLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImY3ZTVhNThhNjdhZlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/api-client.ts":
/*!***************************!*\
  !*** ./lib/api-client.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyticsApi: () => (/* binding */ analyticsApi),\n/* harmony export */   api: () => (/* binding */ api),\n/* harmony export */   authApi: () => (/* binding */ authApi),\n/* harmony export */   blogApi: () => (/* binding */ blogApi),\n/* harmony export */   commentApi: () => (/* binding */ commentApi),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   uploadApi: () => (/* binding */ uploadApi)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\n// Set the base API URL from environment variables\nconst API_URL = \"https://blogmind-app-1.onrender.com\";\n// Function to check if the server is reachable\nasync function checkServerStatus() {\n    try {\n        const response = await fetch(\"\".concat(API_URL, \"/\"), {\n            method: \"GET\"\n        });\n        if (!response.ok) throw new Error(\"Server not reachable\");\n    } catch (error) {\n        document.body.innerHTML = '\\n      <div style=\"text-align: center; padding: 20px;\">\\n        <h1 style=\"color: red;\">Server is Down</h1>\\n        <p>Please try again later.</p>\\n      </div>\\n    ';\n        throw new Error(\"Server is down\");\n    }\n}\n// Check the server before making requests\ncheckServerStatus();\nconst apiClient = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_URL,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Add request interceptor to include auth token\napiClient.interceptors.request.use((config)=>{\n    if (true) {\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n            config.headers.Authorization = \"Bearer \".concat(token);\n        }\n    }\n    return config;\n}, (error)=>Promise.reject(error));\n// Auth-specific API functions\nconst authApi = {\n    // Register a new user\n    register: async (userData)=>{\n        const response = await apiClient.post(\"/api/auth/register\", userData);\n        return response.data;\n    },\n    // Login with email and password\n    login: async (email, password)=>{\n        const formData = new URLSearchParams();\n        formData.append(\"username\", email) // OAuth2 uses \"username\" for email\n        ;\n        formData.append(\"password\", password);\n        try {\n            const response = await apiClient.post(\"/api/auth/login\", formData, {\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            });\n            const data = response.data;\n            localStorage.setItem(\"token\", data.access_token) // Store token\n            ;\n            return data;\n        } catch (error) {\n            var _error_response;\n            console.error(\"Login Failed:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n            throw error;\n        }\n    },\n    // Get current user profile\n    getCurrentUser: async ()=>{\n        try {\n            const response = await apiClient.get(\"/api/users/me\");\n            return response.data;\n        } catch (error) {\n            var _error_response;\n            console.error(\"Error fetching user:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n            throw error;\n        }\n    },\n    // Update user profile\n    updateUser: async (userData)=>{\n        try {\n            const response = await apiClient.put(\"/api/users/me\", userData);\n            return response.data;\n        } catch (error) {\n            var _error_response;\n            console.error(\"Profile update failed:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n            throw error;\n        }\n    }\n};\n// Blog API functions\nconst blogApi = {\n    // Get all blogs with optional filtering\n    getBlogs: async (params)=>{\n        try {\n            const response = await apiClient.get(\"/api/blogs\", {\n                params\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch blogs:\", error);\n            throw error;\n        }\n    },\n    // Get a blog by slug\n    getBlogBySlug: async (slug)=>{\n        try {\n            const response = await apiClient.get(\"/api/blogs/\".concat(slug));\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch blog:\", error);\n            throw error;\n        }\n    },\n    // Create a new blog\n    createBlog: async (blogData)=>{\n        try {\n            const response = await apiClient.post(\"/api/blogs\", blogData);\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to create blog:\", error);\n            throw error;\n        }\n    },\n    // Update a blog\n    updateBlog: async (blogId, blogData)=>{\n        try {\n            const response = await apiClient.put(\"/api/blogs/\".concat(blogId), blogData);\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to update blog:\", error);\n            throw error;\n        }\n    },\n    // Delete a blog\n    deleteBlog: async (blogId)=>{\n        try {\n            await apiClient.delete(\"/api/blogs/\".concat(blogId));\n            return true;\n        } catch (error) {\n            console.error(\"Failed to delete blog:\", error);\n            throw error;\n        }\n    },\n    // Like or unlike a blog\n    likeBlog: async (slug)=>{\n        try {\n            const response = await apiClient.post(\"/api/blogs/\".concat(slug, \"/like\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to like/unlike blog:\", error);\n            throw error;\n        }\n    },\n    // Get all categories\n    getCategories: async ()=>{\n        try {\n            const response = await apiClient.get(\"/api/blogs/categories\");\n            //console.log(\"The categories are:\", response.data) // Remove this line only for testing\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch categories:\", error);\n            throw error;\n        }\n    },\n    // Get user's blogs\n    getUserBlogs: async ()=>{\n        try {\n            const response = await apiClient.get(\"/api/users/blogs\");\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch user blogs:\", error);\n            throw error;\n        }\n    },\n    // Get user's liked blogs\n    getLikedBlogs: async ()=>{\n        try {\n            const response = await apiClient.get(\"/api/users/liked\");\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch liked blogs:\", error);\n            throw error;\n        }\n    }\n};\n// Comment API functions\nconst commentApi = {\n    // Get comments for a blog\n    getComments: async (blogId)=>{\n        try {\n            const response = await apiClient.get(\"/api/comments/blog/\".concat(blogId));\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch comments:\", error);\n            throw error;\n        }\n    },\n    // Add a comment to a blog\n    addComment: async (blogId, content)=>{\n        try {\n            const response = await apiClient.post(\"/api/comments\", {\n                blog_id: blogId,\n                content\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to add comment:\", error);\n            throw error;\n        }\n    },\n    // Update a comment\n    updateComment: async (commentId, content)=>{\n        try {\n            const response = await apiClient.put(\"/api/comments/\".concat(commentId), {\n                content\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to update comment:\", error);\n            throw error;\n        }\n    },\n    // Delete a comment\n    deleteComment: async (commentId)=>{\n        try {\n            await apiClient.delete(\"/api/comments/\".concat(commentId));\n            return true;\n        } catch (error) {\n            console.error(\"Failed to delete comment:\", error);\n            throw error;\n        }\n    },\n    // Get user's comments\n    getUserComments: async ()=>{\n        try {\n            const response = await apiClient.get(\"/api/users/comments\");\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch user comments:\", error);\n            throw error;\n        }\n    }\n};\n// Upload API functions\nconst uploadApi = {\n    // Upload avatar\n    uploadAvatar: async (file)=>{\n        try {\n            const formData = new FormData();\n            formData.append(\"file\", file);\n            const response = await apiClient.post(\"/api/uploads/avatar\", formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to upload avatar:\", error);\n            throw error;\n        }\n    },\n    // Upload blog image\n    uploadBlogImage: async (file)=>{\n        try {\n            const formData = new FormData();\n            formData.append(\"file\", file);\n            const response = await apiClient.post(\"/api/uploads/blog-image\", formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to upload blog image:\", error);\n            throw error;\n        }\n    }\n};\n// Analytics API functions\nconst analyticsApi = {\n    // Record blog view\n    recordBlogView: async (slug, referrer)=>{\n        try {\n            await apiClient.post(\"/api/analytics/view/\".concat(slug), {\n                referrer\n            });\n            return true;\n        } catch (error) {\n            console.error(\"Failed to record view:\", error);\n            return false;\n        }\n    },\n    // Record read progress\n    recordReadProgress: async (slug, readPercentage)=>{\n        if (!slug || typeof readPercentage !== \"number\" || readPercentage < 0 || readPercentage > 100) {\n            console.error(\"Invalid read progress data\");\n            return false;\n        }\n        try {\n            const response = await apiClient.post(\"/api/analytics/read-progress/\".concat(slug), {\n                read_percentage: readPercentage\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response;\n            console.error(\"Failed to record read progress:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n            return false;\n        }\n    },\n    // Get blog analytics\n    getBlogAnalytics: async function(slug) {\n        let days = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 30;\n        try {\n            const response = await apiClient.get(\"/api/analytics/blog/\".concat(slug), {\n                params: {\n                    days\n                }\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch blog analytics:\", error);\n            throw error;\n        }\n    },\n    // Get user analytics\n    getUserAnalytics: async function() {\n        let days = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30;\n        try {\n            const response = await apiClient.get(\"/api/analytics/user\", {\n                params: {\n                    days\n                }\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch user analytics:\", error);\n            throw error;\n        }\n    }\n};\nconst api = {\n    likeBlog: blogApi.likeBlog,\n    getUserAnalytics: analyticsApi.getUserAnalytics\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (apiClient);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api-client.ts\n"));

/***/ })

});